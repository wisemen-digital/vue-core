#!/usr/bin/env node
/* eslint-disable node/prefer-global/process,no-console */
import { execSync } from 'node:child_process'
import fs from 'node:fs/promises'
import path from 'node:path'

import chalk from 'chalk'
import { z } from 'zod'

const themeSchema = z.object({
  colors: z.record(
    z.string(),
    z.object({
      dark: z.string(),
      light: z.string(),
    }),
  ),
})

type Theme = z.infer<typeof themeSchema>

const themesDir = path.resolve(process.cwd(), 'src/themes')
const stylesDir = path.resolve(process.cwd(), 'src/assets/styles/themes')

async function getThemes(): Promise<string[]> {
  try {
    return await fs.readdir(themesDir)
  }
  catch (error) {
    console.error(chalk.red('❌ Error reading themes directory:', error))

    return []
  }
}

function parseThemeFile(theme: string): Theme {
  try {
    const themeAsJson = JSON.parse(theme)
    const parsedTheme = themeSchema.parse(themeAsJson)

    return parsedTheme
  }
  catch (error) {
    throw new Error(`Error parsing theme file: ${error}`)
  }
}

function getThemeFileContent(themeFileName: string): Promise<string> {
  const themeFilePath = path.resolve(themesDir, themeFileName)

  try {
    return fs.readFile(themeFilePath, 'utf-8')
  }
  catch (error) {
    throw new Error(`Error reading theme file: ${error}`)
  }
}

function cssVarFormat(color: string, value: string): string {
  return `--${color}: ${value};`
}

async function generateStyleFile(themeName: string, theme: Theme): Promise<void> {
  const themeNameWithoutExtension = themeName.replace('.json', '')

  /*
  This file is auto-generated.
  To edit this file, edit the "${themeName}" config in the themes directory and run the
  "vue-gen generate-stylesheets" command.
*/

  let content = `
    /* This file was automatically generated by @wisemen/vue-core-generator */
    /* To update theme styles, modify the configuration at: /src/themes/${themeName} */

    .${themeNameWithoutExtension}.light {
      LIGHT
    }

    .${themeNameWithoutExtension}.dark {
      DARK
    }

    .${themeNameWithoutExtension}.system {
      LIGHT

      @media (prefers-color-scheme: dark) {
        DARK
      }
    }
`

  const lightColors = Object.entries(theme.colors).map(([
    color,
    value,
  ]) => cssVarFormat(color, value.light))

  const darkColors = Object.entries(theme.colors).map(([
    color,
    value,
  ]) => cssVarFormat(color, value.dark))

  content = content
    .replaceAll('LIGHT', lightColors.join('\n  '))
    .replaceAll('DARK', darkColors.join('\n  '))

  const fileName = themeName.replace('.json', '.css')
  const filePath = path.resolve(stylesDir, fileName)

  await fs.writeFile(filePath, content, 'utf-8')
}

function lintStyleFile(themeFileName: string): void {
  const themeFile = themeFileName.replace('.json', '.css')

  execSync(`pnpm eslint --fix ${stylesDir}/${themeFile}`)
}

async function generateStylesheet(themeFileName: string): Promise<void> {
  const content = await getThemeFileContent(themeFileName)
  const parsedTheme = parseThemeFile(content)

  try {
    await fs.access(stylesDir, fs.constants.F_OK)
  }
  catch (error) {
    console.error(chalk.red('❌ Error accessing styles directory:', error))
  }

  await generateStyleFile(themeFileName, parsedTheme)
  lintStyleFile(themeFileName)
}

export async function generateStylesheets(): Promise<void> {
  const themeFileNames = await getThemes()

  for (const themeFileName of themeFileNames) {
    console.log(chalk.green(`✅ Found ${themeFileName}`))
    void generateStylesheet(themeFileName)
  }
}
